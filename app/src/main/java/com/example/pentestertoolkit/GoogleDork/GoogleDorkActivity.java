package com.example.pentestertoolkit.GoogleDork;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.CopyText;
import com.example.pentestertoolkit.Global.HttpCommunication;
import com.example.pentestertoolkit.Notes.Note;
import com.example.pentestertoolkit.Privacy.ProxySection.ProxyClient;
import com.example.pentestertoolkit.R;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.util.ArrayList;
import java.util.Locale;

public class GoogleDorkActivity extends AppCompatActivity {

    private ListView dork_results_listview;

    private ArrayList<String> all_scraped_links;

    private ArrayAdapter<String> scraped_links_adapter;

    private ArrayList<String> parent_links_list;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_google_dork);

        getSupportActionBar().hide();

        all_scraped_links = new ArrayList<>();

        parent_links_list = new ArrayList<>();

        scraped_links_adapter = new ArrayAdapter<>(GoogleDorkActivity.this, R.layout.listview_item_google_dork,R.id.txtGoogleDork, all_scraped_links);


        // Initialize UI Components
        EditText edtSearchQuery = findViewById(R.id.edt_google_dork_query);
        ImageView imgSettings = findViewById(R.id.img_settings_google_dork);
        dork_results_listview = findViewById(R.id.scraped_links_listview);
        View btn_pair = findViewById(R.id.send_search_pair);
        TextView btnSend = btn_pair.findViewById(R.id.txtLeft);
        TextView btnSearch = btn_pair.findViewById(R.id.txtRight);
        LinearLayout linearLayoutSend = findViewById(R.id.linearLayoutSendQuery);
        EditText edtSearch = findViewById(R.id.edt_search_dork);

        // Set text to button pairs

        btnSend.setText("Dork");
        btnSearch.setText("Search");

        //set adapter to listview
        dork_results_listview.setAdapter(scraped_links_adapter);


        imgSettings.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                    String query = edtSearchQuery.getText().toString();

                    if (query.isEmpty()){
                        Toast.makeText(GoogleDorkActivity.this, "EMPTY QUERY", Toast.LENGTH_SHORT).show();
                        return;
                    }

                    Toast.makeText(GoogleDorkActivity.this, "Searching...", Toast.LENGTH_LONG).show();
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            while (true) {

                                if(performGoogleSearch(query)) {
                                    //stop search
                                    runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            Toast.makeText(GoogleDorkActivity.this, "Search done.", Toast.LENGTH_SHORT).show();
                                        }
                                    });
                                    break;
                                }
                            }
                        }
                    }).start();
            }
        });


        dork_results_listview.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
                TextView txtLink = view.findViewById(R.id.txtGoogleDork);
                CopyText.copy(GoogleDorkActivity.this, txtLink.getText().toString());
                Toast.makeText(GoogleDorkActivity.this, "Copied!", Toast.LENGTH_SHORT).show();
                return true;
            }
        });


        // Pair Buttons on click transitions functionality
        btnSend.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                btnSend.setBackground(getResources().getDrawable(R.drawable.bg_round));
                btnSend.setTextColor(getResources().getColor(R.color.secondary));
                btnSearch.setBackgroundColor(getResources().getColor(R.color.secondary));
                btnSearch.setTextColor(getResources().getColor(R.color.primary));

                btnSend.setPadding(10,10,10,10);
                btnSearch.setPadding(10,10,10,10);

                edtSearch.setVisibility(View.GONE);
                linearLayoutSend.setVisibility(View.VISIBLE);

            }
        });

        btnSearch.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                btnSearch.setBackground(getResources().getDrawable(R.drawable.bg_round));
                btnSearch.setTextColor(getResources().getColor(R.color.secondary));
                btnSend.setBackgroundColor(getResources().getColor(R.color.secondary));
                btnSend.setTextColor(getResources().getColor(R.color.primary));

                btnSend.setPadding(10,10,10,10);
                btnSearch.setPadding(10,10,10,10);

                edtSearch.setVisibility(View.VISIBLE);
                linearLayoutSend.setVisibility(View.GONE);

            }
        });


        // Search functionality
        edtSearch.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

                try{

                    all_scraped_links.clear();

                    for (String link: parent_links_list){
                        if (link.toLowerCase(Locale.ROOT).contains(charSequence.toString().toLowerCase(Locale.ROOT)))
                            all_scraped_links.add(link);
                    }

                    //Update listview
                    scraped_links_adapter.notifyDataSetChanged();

                }catch(Exception e){
                    e.printStackTrace();
                    Log.i("TEXT_CHANGED", e.getMessage());
                }

            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });

    }



    private boolean performGoogleSearch(String query){

        try {

            int search_index = all_scraped_links.size();

            String GOOGLE_SEARCH_URL = "https://www.google.com.pk/search?q=" + query + "&start=" + search_index;

            Connection connection = Jsoup.connect(GOOGLE_SEARCH_URL);

            //configure jsoup connection with proxy
            if (ProxyClient.isConnected)
            connection.proxy(ProxyClient.proxy);

            Connection.Response response = connection.execute();

            String html = response.body();

            if (extractLinksFromResponse(html))
                return true;

        }catch (Exception e){
            Log.i("DORK ERROR", e.getMessage());
            //stop search
            return true;
        }

        return false;
    }


    private boolean extractLinksFromResponse(String html_response){

        try{

            Document search_document = Jsoup.parse(html_response);

            Elements searched_links_divs = search_document.getElementsByClass("yuRUbf");

            if (searched_links_divs.size() == 0)
                return true;

            Log.i("LINKS_FOUND", searched_links_divs.size() + "");
            for (Element link_div : searched_links_divs) {

                String link = link_div.getElementsByTag("a").attr("href");

                if (!all_scraped_links.contains(link)){
                    all_scraped_links.add(link);//avoid duplicates
                    //update parent list
                    parent_links_list.add(link);
                }

            }

            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    scraped_links_adapter.notifyDataSetChanged();
                }
            });



        }catch (Exception e){
            e.printStackTrace();
            Log.i("GD_ERROR", e.getMessage());

        }

        return false;
    }
}