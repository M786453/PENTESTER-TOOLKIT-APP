package com.example.pentestertoolkit.HttpMonitor;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.text.method.BaseKeyListener;
import android.text.method.PasswordTransformationMethod;
import android.util.Log;
import android.view.View;
import android.webkit.WebResourceRequest;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.HttpCommunication;
import com.example.pentestertoolkit.Global.HttpData;
import com.example.pentestertoolkit.Intruder.Attack;
import com.example.pentestertoolkit.Intruder.AttackTransactionsData;
import com.example.pentestertoolkit.Intruder.ConfigureIntrusionActivity;
import com.example.pentestertoolkit.R;
import com.example.pentestertoolkit.SiteMapper.SmBrowser;

import java.util.ArrayList;
import java.util.Locale;

public class HttpMonitorActivity extends AppCompatActivity implements HttpCommunication.HttpCommunicationCallback {

    private HmRvAdapter adapter;
    private ArrayList<WebResourceRequest> mRequestsList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_http_monitor);

        getSupportActionBar().hide();

        //Initialize and copy Http Requests data to local list
        mRequestsList = new ArrayList<>();
        mRequestsList.addAll(HttpData.requests);

        // reset the responses arraylist
        AttackTransactionsData.responses = new ArrayList<>();

        //UI Components
        RecyclerView hm_rv = findViewById(R.id.hm_recyclerview);
        TextView txtTitle = findViewById(R.id.txtTitleHttpMonitor);
        EditText edtSearch = findViewById(R.id.edt_search_http_monitor);

        String attackType = getIntent().getStringExtra("ATTACK");

        if (attackType != null){

            // It means this activity is started from Intruder's section

            txtTitle.setText("ATTACK RESULTS");

            //set adapter for recycler view
            adapter = new HmRvAdapter(false,mRequestsList);
            startAttack(getIntent());

        }else{

                // It means this activity is started as HTTP Monitor

            //set adapter for recycler view
            adapter = new HmRvAdapter(true,mRequestsList);
        }




        hm_rv.setAdapter(adapter);
        hm_rv.setLayoutManager(new LinearLayoutManager(this));


        //Search functionality
        edtSearch.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

                mRequestsList.clear();

                    for (WebResourceRequest request: HttpData.requests){
                        if (request.getUrl().toString().contains(charSequence))
                            mRequestsList.add(request);
                    }

                    //Update listview
                    adapter.notifyDataSetChanged();

            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });


    }

    private void startAttack(Intent intent){

        try{

            // Get Intent Data
            String attackType = getIntent().getStringExtra("ATTACK");
            String request = getIntent().getStringExtra("REQUEST");
            String[] payloads = getIntent().getStringArrayExtra("PAYLOADS");


            Attack attack = new Attack(request, HttpMonitorActivity.this);

            if (attackType.equals("Sniper")){
                // Notify user
                Toast.makeText(HttpMonitorActivity.this, "Starting Sniper Attack...", Toast.LENGTH_SHORT).show();

                // Execute Sniper Attack
                attack.sniper(payloads);

            }else if (attackType.equals("Pitch Fork")){

                //Notify User
                Toast.makeText(HttpMonitorActivity.this, "Starting Pitch Fork...", Toast.LENGTH_SHORT).show();

                //Execute Pitch Fork Attack
                attack.pitchFork(ConfigureIntrusionActivity.payload_sets_list);

            }else if (attackType.equals("Cluster Bomb")){

                //Notify User
                Toast.makeText(HttpMonitorActivity.this, "Starting Cluster Bomb...", Toast.LENGTH_SHORT).show();

                //Execute Cluster Bomb Attack
                attack.clusterBomb(ConfigureIntrusionActivity.payload_sets_list);

            }

        }catch (Exception e){
            Log.i("HM_ERROR", e.getMessage());
        }

    }


    @Override
    public void onResponseReceived(String mResponse) {
        Log.i("HM_RESPONSE", mResponse);
        AttackTransactionsData.responses.add(mResponse);
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (adapter != null){
                    adapter.notifyDataSetChanged();
                }
            }
        });

    }
}