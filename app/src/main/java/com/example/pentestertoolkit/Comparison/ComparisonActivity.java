package com.example.pentestertoolkit.Comparison;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ListView;
import android.widget.TextView;

import com.example.pentestertoolkit.Encoder.EncoderDecoder;
import com.example.pentestertoolkit.R;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

public class ComparisonActivity extends AppCompatActivity {

    private ListView comparison_listview;
    private View button_pair;
    private TextView txtTitle;
    private ArrayList<HashMap<String, String>> data;

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_comparison);

        // hide action bar
        getSupportActionBar().hide();

        // Data
        String input_str = getIntent().getStringExtra("INPUT");
        String origin = getIntent().getStringExtra("ORIGIN");
        data = new ArrayList<>();

        // Load Data
        data.addAll(getEncoderData(input_str, true));

        // Initialize UI Components
        comparison_listview = findViewById(R.id.comparison_listview);
        button_pair = findViewById(R.id.comparison_btn_pair);
        TextView txtEncode = button_pair.findViewById(R.id.txtLeft);
        TextView txtDecode = button_pair.findViewById(R.id.txtRight);
        txtTitle = findViewById(R.id.txtTitle);

        // Set Title
        txtTitle.setText("ENCODER COMPARISON");

        // Set text to button pairs
        txtEncode.setText("Encode");
        txtDecode.setText("Decode");

        // Set Adapter of Listivew
        ComparisonListAdapter comparisonListAdapter = new ComparisonListAdapter(ComparisonActivity.this, data);
        comparison_listview.setAdapter(comparisonListAdapter);


        // Pair Buttons on click transitions functionality
        txtEncode.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                //Clear Data
                data.clear();

                txtEncode.setBackground(getResources().getDrawable(R.drawable.bg_round));
                txtEncode.setTextColor(getResources().getColor(R.color.secondary));
                txtDecode.setBackgroundColor(getResources().getColor(R.color.secondary));
                txtDecode.setTextColor(getResources().getColor(R.color.primary));

                txtEncode.setPadding(10,10,10,10);
                txtDecode.setPadding(10,10,10,10);


                // Load Data
                data.addAll(getEncoderData(input_str, true));
                comparisonListAdapter.notifyDataSetChanged();

            }
        });

        txtDecode.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                // Clear Data
                data.clear();

                txtDecode.setBackground(getResources().getDrawable(R.drawable.bg_round));
                txtDecode.setTextColor(getResources().getColor(R.color.secondary));
                txtEncode.setBackgroundColor(getResources().getColor(R.color.secondary));
                txtEncode.setTextColor(getResources().getColor(R.color.primary));

                txtEncode.setPadding(10,10,10,10);
                txtDecode.setPadding(10,10,10,10);


                // Load Data
                data.addAll(getEncoderData(input_str, false));
                comparisonListAdapter.notifyDataSetChanged();

            }
        });
    }


    @RequiresApi(api = Build.VERSION_CODES.O)
    private ArrayList<HashMap<String, String>> getEncoderData(String input, boolean encoding){

        ArrayList<HashMap<String, String>> result = new ArrayList<>();

        try{

            String[] encoding_algos = {"Base64","HTML","URL","HEX"};

            for (String algo: encoding_algos){

                HashMap<String, String> algo_result = new HashMap<>();

                algo_result.put("algo", algo);

                if (encoding)
                    algo_result.put("result", EncoderDecoder.encode(input,algo));
                else
                    algo_result.put("result", EncoderDecoder.decode(input,algo));

                result.add(algo_result);
            }

        }catch (Exception e){

            e.printStackTrace();
            Log.i("COMPARISON_ERR", e.getMessage());

        }

        return result;
    }


}