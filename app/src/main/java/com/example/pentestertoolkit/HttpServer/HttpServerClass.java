package com.example.pentestertoolkit.HttpServer;

import android.os.Environment;
import android.util.Log;
import android.widget.TextView;

import com.example.pentestertoolkit.Global.FileManagement;

import org.w3c.dom.Text;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Map;

import fi.iki.elonen.NanoHTTPD;

public class HttpServerClass extends NanoHTTPD {

    private String server_root;
    private String server_address;
    private int port;
    private ServerCallback serverCallback;

    public HttpServerClass(String server_root, int port, ServerCallback serverCallback) {
        super(port);
        this.port = port;
        this.server_root = server_root;
        this.serverCallback = serverCallback;
        new Thread(new Runnable() {
            @Override
            public void run() {
                setServerAddress();
            }
        }).start();
    }

    @Override
    public Response serve(String uri, Method method, Map<String, String> headers, Map<String, String> parms, Map<String, String> files) {

        // Response
        String response = "";

        // Logging Requests
        HttpServerActivity.httpServerLogs += "\nRequest: " + method + " " + uri;

        // Logging Request Parameters
        // Iterate over all parameters
        HttpServerActivity.httpServerLogs += "\nParameters:\n";
        for (Map.Entry<String, String> entry : parms.entrySet()) {
//            String parameterName = entry.getKey();
            String parameterValue = entry.getValue();
            if (parameterValue != null)
            HttpServerActivity.httpServerLogs += parameterValue + "\n";
        }

        // Updating Logs textview
        serverCallback.onRequestReceived();

        // If there any request for root of webserver or index.html, then loads index file
        if (uri.equals("/") || uri.equals("/index.html")){
            response = serveIndexFile();
        }else{

            try {
                String filePath = server_root + uri;
                // Open the file input stream
                InputStream inputStream = new FileInputStream(filePath);

                // Determine the MIME type of the file
                String mimeType = "application/octet-stream"; // Default MIME type
                if (filePath.endsWith(".html") || filePath.endsWith(".htm")) {
                    mimeType = "text/html";
                } else if (filePath.endsWith(".png")) {
                    mimeType = "image/png";
                } else if (filePath.endsWith(".jpg") || filePath.endsWith(".jpeg")) {
                    mimeType = "image/jpeg";
                }else if(filePath.endsWith(".css")){
                    mimeType = "text/css";
                }else if(filePath.endsWith(".js")){
                    mimeType = "text/javascript";
                } else if (filePath.endsWith(".mp4")) {
                    mimeType = "video/mp4";
                } else if (filePath.endsWith(".avi")) {
                    mimeType = "video/x-msvideo";
                } else if (filePath.endsWith(".mp3")) {
                    mimeType = "audio/mpeg";
                } else if (filePath.endsWith(".wav")) {
                    mimeType = "audio/wav";
                }

                // Create a response with the file content
                return newChunkedResponse(Response.Status.OK, mimeType, inputStream);
            } catch (IOException e) {
                // Handle any errors that occur during file serving
                e.printStackTrace();
                return newFixedLengthResponse(Response.Status.INTERNAL_ERROR, NanoHTTPD.MIME_PLAINTEXT, "Error serving the file");
            }



        }

        return newFixedLengthResponse(response);
    }

    private String serveIndexFile(){
        // Building Response
        String response = "";

        try{

            // Reading index.html file
            String index_file_path = server_root + "/index.html";

            FileReader index = new FileReader(index_file_path);

            BufferedReader reader = new BufferedReader(index);

            String line = "";

            while((line = reader.readLine()) != null){
                response += line;
            }

            reader.close();


        }catch (Exception e){
            e.printStackTrace();
        }

        return response;
    }


    private String setServerAddress(){

        String ip_check_command = "/system/bin/ifconfig";

        String command_result = "";

        try {

            Process process = Runtime.getRuntime().exec(ip_check_command);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line;
            int addr_line_no = 0;
            while ((line = reader.readLine()) != null) {
                if (addr_line_no == 1)
                    command_result += line + "\n";

                if(line.contains("wlan0"))
                    addr_line_no++;

            }

            this.server_address = command_result.split(":")[1].split(" ")[0];
            if (server_address.equals("null") || !server_address.contains(".")){
                this.server_address = "127.0.0.1";
            }

            reader.close();

        } catch (IOException e) {
            e.printStackTrace();
        }

        return server_address;
    }

    public String getServer_address() {
        return server_address;
    }

    public int getPort() {
        return port;
    }

    public interface ServerCallback{

        void onRequestReceived();
    }
}
