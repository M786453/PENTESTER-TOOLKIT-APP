package com.example.pentestertoolkit.HttpServer;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.os.Environment;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.FileManagement;
import com.example.pentestertoolkit.R;

import java.io.IOException;

public class HttpServerActivity extends AppCompatActivity {

    private HttpServerClass httpServer;

    String app_directory_path = Environment.getExternalStorageDirectory() + "/PENTESTER TOOLKIT";

    String server_root = app_directory_path + "/HttpServer";

    String httpServerLogs;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_http_server);

        getSupportActionBar().hide();

        httpServerLogs = "Server Status: Offline";

        TextView txtHttpServerLogs = findViewById(R.id.txtHttpServerLogs);

        Button btnStartHttpServer = findViewById(R.id.btnStartHttpServer);

        btnStartHttpServer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (FileManagement.getWritePermission(HttpServerActivity.this)){

                    // create Necessary file and directories
                    createFileAndDirectories();

                    if (btnStartHttpServer.getText().equals("START HTTP SERVER")){
                        Toast.makeText(HttpServerActivity.this, "Starting Http Server...", Toast.LENGTH_SHORT).show();
                        httpServer = new HttpServerClass(server_root);
                        try {
                            httpServer.start();
                            Toast.makeText(HttpServerActivity.this, "Server started successfully.", Toast.LENGTH_SHORT).show();
                            httpServerLogs += "\nServer Status: Online";
                            txtHttpServerLogs.setText(httpServerLogs);
                            btnStartHttpServer.setText("STOP HTTP SERVER");
                        } catch (IOException e) {
                            e.printStackTrace();

                            Toast.makeText(HttpServerActivity.this, "Server could not start.", Toast.LENGTH_SHORT).show();
                        }
                    }else if(btnStartHttpServer.getText().equals("STOP HTTP SERVER")){
                        httpServer.stop();
                        httpServerLogs += "\nServer Status: Offline";
                        txtHttpServerLogs.setText(httpServerLogs);
                        btnStartHttpServer.setText("START HTTP SERVER");
                    }

                }



            }
        });
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (httpServer != null){
            httpServer.stop();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == FileManagement.WRITE_REQ_CODE && grantResults.length >0) {

           createFileAndDirectories();

        }
    }


    private void createFileAndDirectories(){
        // Create App directory if not present
        FileManagement.createAppDirectory();

        // Create HttpServer directory if not present
        FileManagement.createDirectory(server_root);

        // Create Index File if not present
        FileManagement.createIndexFile(server_root);
    }
}