package com.example.pentestertoolkit.HttpServer;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.FileManagement;
import com.example.pentestertoolkit.Global.HttpData;
import com.example.pentestertoolkit.R;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;

public class HttpServerActivity extends AppCompatActivity implements HttpServerClass.ServerCallback, ServerFileSystemAdapter.FileExplorerCallback {

    private static HttpServerClass httpServer;

    public static String app_directory_path = Environment.getExternalStorageDirectory() + "/PENTESTER TOOLKIT";

    public static String server_root = app_directory_path + "/HttpServer";

    public static String httpServerLogs = "Server Status: Offline";

    private TextView txtHttpServerLogs;

    private ArrayList<String[]> data;

    private ServerFileSystemAdapter adapter;

    private TextView txtCurrentPath;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_http_server);

        getSupportActionBar().hide();

        //UI Components
        txtHttpServerLogs = findViewById(R.id.txtHttpServerLogs);
        LinearLayout linearLayoutFileExplorer = findViewById(R.id.linearLayoutFileExplorer);
        View btnPair = findViewById(R.id.srvr_btn_pair);
        TextView txtLogs = btnPair.findViewById(R.id.txtLeft);
        TextView txtFileExplorer = btnPair.findViewById(R.id.txtRight);
        ScrollView logsScrollView = findViewById(R.id.logsScrollView);
        ListView fileSystemListview = findViewById(R.id.srvrFileSysListview);
        txtCurrentPath = findViewById(R.id.txtCurrentPath);
        Button btnStartHttpServer = findViewById(R.id.btnStartHttpServer);

        // Data structure
        data = new ArrayList<>();

        // Load Data
        data.addAll(FileExplorer.getData(HttpServerActivity.server_root));

        //setup adapter
        adapter = new ServerFileSystemAdapter(this, data, txtCurrentPath);
        fileSystemListview.setAdapter(adapter);

        // Set text to button pairs
        txtLogs.setText("Logs");
        txtFileExplorer.setText("File Explorer");

        //Setting button text to 'Stop Server' if server is running
        if (httpServer != null && httpServer.isAlive())
            btnStartHttpServer.setText("STOP HTTP SERVER");

        //Set Logs data to textview
        txtHttpServerLogs.setText(HttpServerActivity.httpServerLogs);

        //Http Server Functionality
        btnStartHttpServer.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void onClick(View view) {

                if (FileManagement.getWritePermission(HttpServerActivity.this)){

                    // create Necessary file and directories
                    createFileAndDirectories();

                    if (btnStartHttpServer.getText().equals("START HTTP SERVER")){
                        Toast.makeText(HttpServerActivity.this, "Starting Http Server...", Toast.LENGTH_SHORT).show();
                        HttpServerActivity.httpServer = new HttpServerClass(server_root,8080, HttpServerActivity.this);
                        try {
                            HttpServerActivity.httpServer.start();
                            Toast.makeText(HttpServerActivity.this, "Starting server...", Toast.LENGTH_SHORT).show();

                            //Update server status after 1 second
                            new Handler().postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    HttpServerActivity.httpServerLogs += "\nServer Status: Online [" + LocalDateTime.now().toString().replace("T"," ") + "]";
                                    HttpServerActivity.httpServerLogs += "\nServer Address: http://" + httpServer.getServer_address() + ":" + httpServer.getPort();
                                    txtHttpServerLogs.setText(HttpServerActivity.httpServerLogs);
                                    btnStartHttpServer.setText("STOP HTTP SERVER");
                                }
                            }, 1000);


                        } catch (IOException e) {
                            e.printStackTrace();
                            HttpServerActivity.httpServerLogs += "\n" + e.getMessage();
                            Toast.makeText(HttpServerActivity.this, "Server could not start.", Toast.LENGTH_SHORT).show();
                        }
                    }else if(btnStartHttpServer.getText().equals("STOP HTTP SERVER")){
                        HttpServerActivity.httpServer.stop();
                        HttpServerActivity.httpServerLogs += "\nServer Status: Offline [" + LocalDateTime.now().toString().replace("T"," ") + "]";
                        txtHttpServerLogs.setText(HttpServerActivity.httpServerLogs);
                        btnStartHttpServer.setText("START HTTP SERVER");
                    }

                }



            }
        });





        // Pair Buttons on click transitions functionality
        txtLogs.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                txtLogs.setBackground(getResources().getDrawable(R.drawable.bg_round));
                txtLogs.setTextColor(getResources().getColor(R.color.secondary));
                txtFileExplorer.setBackgroundColor(getResources().getColor(R.color.secondary));
                txtFileExplorer.setTextColor(getResources().getColor(R.color.primary));

                txtLogs.setPadding(10,10,10,10);
                txtFileExplorer.setPadding(10,10,10,10);

                // Update visibility of views
                logsScrollView.setVisibility(View.VISIBLE);
                linearLayoutFileExplorer.setVisibility(View.GONE);

            }
        });

        txtFileExplorer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                txtFileExplorer.setBackground(getResources().getDrawable(R.drawable.bg_round));
                txtFileExplorer.setTextColor(getResources().getColor(R.color.secondary));
                txtLogs.setBackgroundColor(getResources().getColor(R.color.secondary));
                txtLogs.setTextColor(getResources().getColor(R.color.primary));

                txtLogs.setPadding(10,10,10,10);
                txtFileExplorer.setPadding(10,10,10,10);

                //Update visibility of views
                logsScrollView.setVisibility(View.GONE);
                linearLayoutFileExplorer.setVisibility(View.VISIBLE);

            }
        });
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == FileManagement.WRITE_REQ_CODE && grantResults.length >0) {

           createFileAndDirectories();

        }
    }


    private void createFileAndDirectories(){
        // Create App directory if not present
        FileManagement.createAppDirectory();

        // Create HttpServer directory if not present
        FileManagement.createDirectory(server_root);

        // Create Index File if not present
        FileManagement.createIndexFile(server_root);
    }


    @Override
    public void onRequestReceived() {
        txtHttpServerLogs.post(new Runnable() {
            @Override
            public void run() {
                txtHttpServerLogs.setText(HttpServerActivity.httpServerLogs);
            }
        });
    }

    @Override
    public void onPathChanged(String current_path) {
        //Updates the contents of listview if current_path changed
        data.clear();
        //If current_path is empty, it means current_path is root directory
        //Only show previous directory item, when it is not root directory,as we don't want the user to
        // navigate out of the root directory
        // add item for previous directory
        if (!current_path.isEmpty()) {
            data.add(new String[]{"FOLDER", ".."});
        }
        // update list with directories and files present in current directory
        data.addAll(FileExplorer.getData(HttpServerActivity.server_root + current_path));
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (adapter != null) {
                    adapter.notifyDataSetChanged();
                    if(!current_path.isEmpty()) {
                        txtCurrentPath.setText("Path: ." + current_path);
                    }else{
                        txtCurrentPath.setText("Path: ./");
                    }
                }
            }
        });
    }
}