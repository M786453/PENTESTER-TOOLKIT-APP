package com.example.pentestertoolkit.HttpServer;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.FileManagement;
import com.example.pentestertoolkit.Global.HttpData;
import com.example.pentestertoolkit.R;

import java.io.IOException;
import java.time.LocalDateTime;

public class HttpServerActivity extends AppCompatActivity implements HttpServerClass.ServerCallback {

    private static HttpServerClass httpServer;

    private String app_directory_path = Environment.getExternalStorageDirectory() + "/PENTESTER TOOLKIT";

    private String server_root = app_directory_path + "/HttpServer";

    public static String httpServerLogs = "Server Status: Offline";

    private TextView txtHttpServerLogs;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_http_server);

        getSupportActionBar().hide();

        //UI Components
        txtHttpServerLogs = findViewById(R.id.txtHttpServerLogs);

        Button btnStartHttpServer = findViewById(R.id.btnStartHttpServer);

        //Setting button text to 'Stop Server' if server is running
        if (httpServer != null && httpServer.isAlive())
            btnStartHttpServer.setText("STOP HTTP SERVER");

        //Set Logs data to textview
        txtHttpServerLogs.setText(HttpServerActivity.httpServerLogs);

        btnStartHttpServer.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void onClick(View view) {

                if (FileManagement.getWritePermission(HttpServerActivity.this)){

                    // create Necessary file and directories
                    createFileAndDirectories();

                    if (btnStartHttpServer.getText().equals("START HTTP SERVER")){
                        Toast.makeText(HttpServerActivity.this, "Starting Http Server...", Toast.LENGTH_SHORT).show();
                        HttpServerActivity.httpServer = new HttpServerClass(server_root,8080, HttpServerActivity.this);
                        try {
                            HttpServerActivity.httpServer.start();
                            Toast.makeText(HttpServerActivity.this, "Server started successfully.", Toast.LENGTH_SHORT).show();
                            HttpServerActivity.httpServerLogs += "\nServer Status: Online [" + LocalDateTime.now().toString().replace("T"," ") + "]";
                            HttpServerActivity.httpServerLogs += "\nServer Address: http://" + httpServer.getServer_address() + ":" + httpServer.getPort();
                            txtHttpServerLogs.setText(HttpServerActivity.httpServerLogs);
                            btnStartHttpServer.setText("STOP HTTP SERVER");

                        } catch (IOException e) {
                            e.printStackTrace();
                            HttpServerActivity.httpServerLogs += "\n" + e.getMessage();
                            Toast.makeText(HttpServerActivity.this, "Server could not start.", Toast.LENGTH_SHORT).show();
                        }
                    }else if(btnStartHttpServer.getText().equals("STOP HTTP SERVER")){
                        HttpServerActivity.httpServer.stop();
                        HttpServerActivity.httpServerLogs += "\nServer Status: Offline [" + LocalDateTime.now().toString().replace("T"," ") + "]";
                        txtHttpServerLogs.setText(HttpServerActivity.httpServerLogs);
                        btnStartHttpServer.setText("START HTTP SERVER");
                    }

                }



            }
        });
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == FileManagement.WRITE_REQ_CODE && grantResults.length >0) {

           createFileAndDirectories();

        }
    }


    private void createFileAndDirectories(){
        // Create App directory if not present
        FileManagement.createAppDirectory();

        // Create HttpServer directory if not present
        FileManagement.createDirectory(server_root);

        // Create Index File if not present
        FileManagement.createIndexFile(server_root);
    }


    @Override
    public void onRequestReceived() {
        txtHttpServerLogs.post(new Runnable() {
            @Override
            public void run() {
                txtHttpServerLogs.setText(HttpServerActivity.httpServerLogs);
            }
        });
    }
}