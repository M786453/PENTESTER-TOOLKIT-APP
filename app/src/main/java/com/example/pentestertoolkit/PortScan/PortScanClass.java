package com.example.pentestertoolkit.PortScan;

import android.os.AsyncTask;
import android.os.Handler;
import android.util.Log;

import androidx.annotation.NonNull;

import java.net.InetSocketAddress;
import java.net.Socket;
import java.io.IOException;
import java.net.SocketAddress;
import java.net.SocketTimeoutException;

public class PortScanClass extends AsyncTask<Void, Void, Void> {

    private String host;
    private int port;
    private PortScanCallback portScanCallback;
    private int TIMEOUT = 3000;

    public PortScanClass(String host, int port, PortScanCallback portScanCallback){
        this.host = host;
        this.port = port;
        this.portScanCallback = portScanCallback;
    }

    @Override
    protected Void doInBackground(Void... voids) {
        scan(host,port);
        return null;
    }


    public void scan(String ip_address, int port_number){
        try{
            Socket socket = new Socket();
            InetSocketAddress socketAddress = new InetSocketAddress(host,port);
            socket.setSoTimeout(TIMEOUT);
            socket.connect(socketAddress);
            Log.i("PORT_STATUS", "ALIVE");
            if (portScanCallback != null)
                portScanCallback.onPortScanResult(host,port,true);
            socket.close();
        }catch (Exception e){
            Log.i("PORT_STATUS", "DEAD");
            if (portScanCallback != null)
                portScanCallback.onPortScanResult(host,port,false);
            e.printStackTrace();
        }


    }


    public interface PortScanCallback {

        void onPortScanResult(String host, int port, boolean isOpen);

    }


}
