package com.example.pentestertoolkit.PortScan;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.CopyText;
import com.example.pentestertoolkit.Global.FileManagement;
import com.example.pentestertoolkit.PingUtility.PingUtilityActivity;
import com.example.pentestertoolkit.R;

public class PortScanActivity extends AppCompatActivity implements PortScanClass.PortScanCallback {

    private TextView txtPortScanOutput;
    private LinearLayout linearLayoutParent;
    private String TOOL_DIRECTORY_PATH = Environment.getExternalStorageDirectory() + "/PENTESTER TOOLKIT/PortScan";
    private String resultText;
    private boolean isScanningSinglePort;
    private int last_port;
    private TextView txtOutput;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_port_scan);

        getSupportActionBar().hide();

        resultText = "";
        isScanningSinglePort = false;

        // Initialize UI Components

        EditText edtPortScan = findViewById(R.id.edt_port_scan);
        ImageView imgPortScanSettings = findViewById(R.id.img_settings_port_scan);
        ImageView imgPortScanOutputCopy = findViewById(R.id.imgPortScanTextCopy);
        ImageView imgPortScanOutputFileSave = findViewById(R.id.imgPortScanFileSave);
        txtPortScanOutput = findViewById(R.id.txtPortScanOutput);
        linearLayoutParent = findViewById(R.id.linearLayoutPortScan);
        txtOutput = findViewById(R.id.txtOutputPortScan);

        // Port Scan Functionality

        imgPortScanSettings.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                        String edtPortScanInput = edtPortScan.getText().toString();

                        if (edtPortScanInput.isEmpty()){
                            Toast.makeText(PortScanActivity.this, "EMPTY INPUT", Toast.LENGTH_SHORT).show();
                            return;
                        }

                        showSettingsPopup(edtPortScanInput);

            }
        });


        // Copy port scan output

        imgPortScanOutputCopy.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                CopyText.copy(PortScanActivity.this, txtPortScanOutput.getText() + "");
                Toast.makeText(PortScanActivity.this, "Copied!", Toast.LENGTH_SHORT).show();
            }
        });

        // Save ping output to a file functionality

        imgPortScanOutputFileSave.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void onClick(View view) {

                if(FileManagement.getWritePermission(PortScanActivity.this))
                    if(FileManagement.saveFile(txtPortScanOutput.getText().toString(), TOOL_DIRECTORY_PATH))
                        Toast.makeText(PortScanActivity.this, "File Saved!", Toast.LENGTH_SHORT).show();
                    else
                        Toast.makeText(PortScanActivity.this, "File not saved.", Toast.LENGTH_SHORT).show();
            }
        });

    }

    private void showSettingsPopup(String ip_address) {

        LayoutInflater layoutInflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);

        View popup_view = layoutInflater.inflate(R.layout.port_scan_popup, null);

        // UI Components

        EditText edtPortStart = popup_view.findViewById(R.id.edt_port_start);
        EditText edtPortEnd = popup_view.findViewById(R.id.edt_port_end);
        Button btnScan = popup_view.findViewById(R.id.btnScan);

        // Setup Popup Window
        int width = LinearLayout.LayoutParams.MATCH_PARENT;
        int height = LinearLayout.LayoutParams.MATCH_PARENT;
        PopupWindow popupWindow = new PopupWindow(popup_view, width, height, true);

        // Show popup
        popupWindow.showAtLocation(linearLayoutParent, Gravity.CENTER, 0, 0);


        // Scan Functionality
        btnScan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                resultText = "";

                String start_port_str = edtPortStart.getText().toString();
                String end_port_str = edtPortEnd.getText().toString();

                if (start_port_str.isEmpty()){
                    Toast.makeText(PortScanActivity.this, "Start Port empty input.", Toast.LENGTH_SHORT).show();
                    return;
                }

                int start_port = Integer.parseInt(edtPortStart.getText().toString());

                if (end_port_str.isEmpty()){
                    // If end port is empty, scan single port
                    last_port = start_port;
                    isScanningSinglePort = true;
                    Toast.makeText(PortScanActivity.this, "Scanning start...", Toast.LENGTH_SHORT).show();
                    scan(ip_address, start_port);
                    popupWindow.dismiss();
                    return;
                }

                isScanningSinglePort = false;

                int end_port = Integer.parseInt(edtPortEnd.getText().toString());

                if (start_port <= 0 || start_port >= end_port || start_port > 65535){
                    Toast.makeText(PortScanActivity.this, "Invalid Start Port.", Toast.LENGTH_SHORT).show();
                    return;
                }

                if (end_port > 65535){
                    Toast.makeText(PortScanActivity.this, "Invalid End Port.", Toast.LENGTH_SHORT).show();
                    return;
                }

                last_port = end_port;

                Toast.makeText(PortScanActivity.this, "Scanning start...", Toast.LENGTH_SHORT).show();
                scan(ip_address, start_port, end_port);
                popupWindow.dismiss();

            }
        });
    }

    private void scan(String ip_address, int start_port, int end_port){
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i=start_port; i<=end_port; i++){
                    PortScanClass portScan = new PortScanClass(ip_address, i, PortScanActivity.this);
                    portScan.execute();
                }

            }
        }).start();
    }

    private void scan(String ip_address, int port){
        PortScanClass portScan = new PortScanClass(ip_address, port, PortScanActivity.this);
        portScan.execute();

    }


    @Override
    public void onPortScanResult(String host, int port, boolean isOpen) {

            if (isScanningSinglePort)
                resultText += "Port#" + port + " of Host " + host + " is " + (isOpen ? "open." : "closed.") + "\n";
            else if (isOpen)
                resultText += "Port#" + port + " of Host " + host + " is open.\n";

            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    txtOutput.setText("Scanning: " + port);
                    txtPortScanOutput.setText(resultText);
                    if (last_port == port) {
                        Toast.makeText(PortScanActivity.this, "Scanning Finished.", Toast.LENGTH_SHORT).show();
                        txtOutput.setText("Output");
                    }

                }
            });



    }
}