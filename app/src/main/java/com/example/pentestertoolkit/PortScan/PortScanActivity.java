package com.example.pentestertoolkit.PortScan;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.CopyText;
import com.example.pentestertoolkit.Global.FileManagement;
import com.example.pentestertoolkit.PingUtility.PingUtilityActivity;
import com.example.pentestertoolkit.R;

public class PortScanActivity extends AppCompatActivity implements PortScanClass.PortScanCallback {

    TextView txtPortScanOutput;

    String TOOL_DIRECTORY_PATH = Environment.getExternalStorageDirectory() + "/PENTESTER TOOLKIT/PortScan";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_port_scan);

        getSupportActionBar().hide();

        // Initialize UI Components

        EditText edtPortScan = findViewById(R.id.edt_port_scan);
        ImageView imgPortScanSettings = findViewById(R.id.img_settings_port_scan);
        ImageView imgPortScanOutputCopy = findViewById(R.id.imgPortScanTextCopy);
        ImageView imgPortScanOutputFileSave = findViewById(R.id.imgPortScanFileSave);
        txtPortScanOutput = findViewById(R.id.txtPortScanOutput);

        // Port Scan Functionality

        imgPortScanSettings.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                    try {
                        String edtPortScanInput = edtPortScan.getText().toString();

                        if (edtPortScanInput.isEmpty()){
                            Toast.makeText(PortScanActivity.this, "EMPTY INPUT", Toast.LENGTH_SHORT).show();
                            return;
                        }

                        String ip_address = edtPortScanInput.split(":")[0];
                        int port = Integer.parseInt(edtPortScanInput.split(":")[1]);
                        Toast.makeText(PortScanActivity.this, "Scanning Port#" + port + " of Host " + ip_address, Toast.LENGTH_SHORT).show();
                        PortScanClass portScanner = new PortScanClass(ip_address, port, PortScanActivity.this);
                        portScanner.execute();
                    }catch (Exception e){
                        Toast.makeText(PortScanActivity.this, "INVALID INPUT", Toast.LENGTH_SHORT).show();
                        e.printStackTrace();
                    }
            }
        });


        // Copy port scan output

        imgPortScanOutputCopy.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                CopyText.copy(PortScanActivity.this, txtPortScanOutput.getText() + "");
                Toast.makeText(PortScanActivity.this, "Copied!", Toast.LENGTH_SHORT).show();
            }
        });

        // Save ping output to a file functionality

        imgPortScanOutputFileSave.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void onClick(View view) {

                if(FileManagement.getWritePermission(PortScanActivity.this))
                    if(FileManagement.saveFile(txtPortScanOutput.getText().toString(), TOOL_DIRECTORY_PATH))
                        Toast.makeText(PortScanActivity.this, "File Saved!", Toast.LENGTH_SHORT).show();
                    else
                        Toast.makeText(PortScanActivity.this, "File not saved.", Toast.LENGTH_SHORT).show();
            }
        });

    }


    @Override
    public void onPortScanResult(String host, int port, boolean isOpen) {
        String resultText = "Port#" + port + " of Host " + host + " is " + (isOpen ? "open." : "closed.");
        txtPortScanOutput.setText(resultText);
    }
}