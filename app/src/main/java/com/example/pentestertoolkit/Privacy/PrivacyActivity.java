package com.example.pentestertoolkit.Privacy;

import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Privacy.ProxySection.ProxiesDataClient;
import com.example.pentestertoolkit.Privacy.ProxySection.ProxyClient;
import com.example.pentestertoolkit.Privacy.ProxySection.ProxyListAdapter;
import com.example.pentestertoolkit.R;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;

public class PrivacyActivity extends AppCompatActivity implements ProxiesDataClient.ProxiesDataCallback, ProxyClient.ProxyClientCallback {


    private ListView proxies_listview;
    private ProgressDialog progressDialog;
    private LinearLayout linearLayoutProxy, linearLayoutTor, linearLayoutConnected;
    private View pairButtonsView;
    private TextView txtConnectedStatus;
    private Button btnDisconnect;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_privacy);

        getSupportActionBar().hide();

        // Progress Dialog
        progressDialog = new ProgressDialog(PrivacyActivity.this);

        // Initialize UI Components
        pairButtonsView = findViewById(R.id.button_pair_privacy);
        TextView txtProxy = pairButtonsView.findViewById(R.id.txtLeft);
        TextView txtTor = pairButtonsView.findViewById(R.id.txtRight);
        proxies_listview = findViewById(R.id.proxies_listview);
        linearLayoutProxy = findViewById(R.id.linearlayoutProxy);
        linearLayoutTor = findViewById(R.id.linearlayoutTor);
        linearLayoutConnected = findViewById(R.id.linearlayoutConnected);
        txtConnectedStatus = findViewById(R.id.txtConnectedStatusPrivacyActivity);
        btnDisconnect = findViewById(R.id.btnDisconnectPrivacyActivity);


        if(ProxyClient.proxy != null && ProxyClient.isConnected) {

            // Showing connection status
            txtConnectedStatus.setText("Connected to " + ProxyClient.proxy.address().toString().replace("/",""));
            linearLayoutConnected.setVisibility(View.VISIBLE);
            linearLayoutProxy.setVisibility(View.GONE);
            linearLayoutTor.setVisibility(View.GONE);
            pairButtonsView.setVisibility(View.GONE);


        }else{
            // Changing text of button pairs
            txtProxy.setText("PROXY");
            txtTor.setText("TOR");

            // Setting up progress dialog

            progressDialog.setMessage("Loading data...");
            progressDialog.show();

            // Calling ProxiesDataClient
            String PROXIES_URL = "https://spys.one/en/free-proxy-list/";
            ProxiesDataClient proxiesDataClient = new ProxiesDataClient(PrivacyActivity.this, PROXIES_URL);
            proxiesDataClient.execute();


        }



        // Pair Buttons on click transitions functionality

        txtProxy.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                txtProxy.setBackground(getResources().getDrawable(R.drawable.bg_round));
                txtProxy.setTextColor(getResources().getColor(R.color.secondary));
                txtTor.setBackgroundColor(getResources().getColor(R.color.secondary));
                txtTor.setTextColor(getResources().getColor(R.color.primary));

                txtProxy.setPadding(10,10,10,10);
                txtTor.setPadding(10,10,10,10);

                linearLayoutProxy.setVisibility(View.VISIBLE);
                linearLayoutTor.setVisibility(View.GONE);
            }
        });

        txtTor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                txtTor.setBackground(getResources().getDrawable(R.drawable.bg_round));
                txtTor.setTextColor(getResources().getColor(R.color.secondary));
                txtProxy.setBackgroundColor(getResources().getColor(R.color.secondary));
                txtProxy.setTextColor(getResources().getColor(R.color.primary));

                txtProxy.setPadding(10,10,10,10);
                txtTor.setPadding(10,10,10,10);

                linearLayoutProxy.setVisibility(View.GONE);
                linearLayoutTor.setVisibility(View.VISIBLE);
            }
        });

        // Proxy Disconnect Functionality
        btnDisconnect.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (ProxyClient.proxy != null && ProxyClient.isConnected){
                    // Reset values
                    ProxyClient.proxy = null;
                    ProxyClient.isConnected = false;

                    // Changing visibility of views
                    linearLayoutConnected.setVisibility(View.GONE);
                    linearLayoutProxy.setVisibility(View.VISIBLE);
                    linearLayoutTor.setVisibility(View.GONE);
                    pairButtonsView.setVisibility(View.GONE);


                    // Changing text of button pairs
                    txtProxy.setText("PROXY");
                    txtTor.setText("TOR");
                    progressDialog.setMessage("Loading data...");
                    progressDialog.show();

                    // Calling ProxiesDataClient
                    String PROXIES_URL = "https://spys.one/en/free-proxy-list/";
                    ProxiesDataClient proxiesDataClient = new ProxiesDataClient(PrivacyActivity.this, PROXIES_URL);
                    proxiesDataClient.execute();
                }
            }
        });

    }



    @Override
    public void onProxiesDataResult(ArrayList<HashMap<String, String>> proxies_list) {
        try {

            progressDialog.dismiss();

            //Sort Proxies

            sortProxies(proxies_list);

            //Setting adapter
            ProxyListAdapter proxyListAdapter = new ProxyListAdapter(this, proxies_list);
            proxies_listview.setAdapter(proxyListAdapter);

        } catch (Exception e) {

            progressDialog.dismiss();
            Toast.makeText(this, "Error Occurred.", Toast.LENGTH_SHORT).show();
            Log.i("Proxies_Error", e.getMessage());
            e.printStackTrace();

        }
    }

    @Override
    public void onProxyConnected() {

        // Showing connection status
        if (ProxyClient.isConnected){
            Toast.makeText(this, "Connection Successful.", Toast.LENGTH_SHORT).show();
            txtConnectedStatus.setText("Connected to " + ProxyClient.proxy.address().toString().replace("/", ""));
            linearLayoutConnected.setVisibility(View.VISIBLE);
            linearLayoutProxy.setVisibility(View.GONE);
            linearLayoutTor.setVisibility(View.GONE);
            pairButtonsView.setVisibility(View.GONE);
        }else{
            Toast.makeText(this, "Connection Failed.", Toast.LENGTH_SHORT).show();
        }


    }


    private void sortProxies(ArrayList<HashMap<String, String>> proxies_list){

        Collections.sort(proxies_list, new Comparator<HashMap<String, String>>() {
            @Override
            public int compare(HashMap<String, String> hm_proxy1, HashMap<String, String> hm_proxy2) {



                // Changing uptime to numerical percentage if value is equal to new

                if (hm_proxy1.get("uptime").equals("new"))
                    hm_proxy1.put("uptime", "100%");

                if (hm_proxy2.get("uptime").equals("new"))
                    hm_proxy2.put("uptime", "100%");

                // Getting uptime numerical value
                int p1_uptime = Integer.parseInt(hm_proxy1.get("uptime").substring(0,hm_proxy1.get("uptime").length() - 1));
                int p2_uptime = Integer.parseInt(hm_proxy2.get("uptime").substring(0,hm_proxy2.get("uptime").length() - 1));



                return p2_uptime - p1_uptime;
            }
        });

    }
}