package com.example.pentestertoolkit.Privacy.ProxySection;

import android.os.AsyncTask;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;

public class ProxyClient extends AsyncTask<Void, Void, Void> {

    private String TAG = "PROXY_CLIENT";
    private String host;
    private int port;
    private String protocol;
    private ProxyClientCallback proxyClientCallback;
    public static Proxy proxy;
    public static boolean isConnected = false;

    public ProxyClient(String host, int port, String protocol, ProxyClientCallback proxyClientCallback){

        this.host = host;
        this.port = port;
        this.protocol = protocol;
        this.proxyClientCallback = proxyClientCallback;

    }

    public Proxy setupProxy(String host, int port, String protocol){

        if(protocol.equals("http") || protocol.equals("https")){
            proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(host, port));
        }else{
            proxy = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(host, port));
        }

        return proxy;

    }


    public void testProxy(Proxy proxy){

        // Testing connectivity with proxy by getting public ip address from https://checkip.amazonaws.com

        try {
            URL url = new URL("https://checkip.amazonaws.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection(proxy);
            connection.setRequestMethod("GET");
            connection.connect();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String public_ip = reader.readLine();

            // If retrieved public ip is same as inputted host, then it means proxy working fine
            if (public_ip.equals(host))
                ProxyClient.isConnected = true;

            reader.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @Override
    protected Void doInBackground(Void... voids) {
        Proxy proxy = setupProxy(host, port, protocol);
        testProxy(proxy);
        if (proxyClientCallback != null){
            proxyClientCallback.onProxyConnected();
        }
        return null;
    }


    public interface ProxyClientCallback{

        void onProxyConnected();

    }
}
