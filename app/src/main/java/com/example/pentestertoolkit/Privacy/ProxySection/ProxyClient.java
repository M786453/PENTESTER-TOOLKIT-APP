package com.example.pentestertoolkit.Privacy.ProxySection;

import android.os.AsyncTask;
import android.util.Log;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.URL;

public class ProxyClient extends AsyncTask<Void, Void, String> {

    private String TAG = "PROXY_CLIENT";
    public static String host;
    private int port;
    private String protocol;
    private ProxyClientCallback proxyClientCallback;
    public static Proxy proxy;

    public ProxyClient(String host, int port, String protocol, ProxyClientCallback proxyClientCallback){

        ProxyClient.host = host;
        this.port = port;
        this.protocol = protocol;
        this.proxyClientCallback = proxyClientCallback;
    }

    public Proxy connect(String host, int port, String protocol){



        if(protocol.equals("http") || protocol.equals("https")){
            proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(host, port));
        }else{
            proxy = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(host, port));
        }

        return proxy;

    }


    public String getPublicIpAddress(Proxy proxy){
        String public_ip = "";
        try {
            URL url = new URL("https://checkip.amazonaws.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection(proxy);
            connection.setRequestMethod("GET");
//            connection.setConnectTimeout(5000);
//            connection.setReadTimeout(5000);
            connection.connect();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            public_ip = reader.readLine();
            reader.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return public_ip;
    }

    @Override
    protected String doInBackground(Void... voids) {

        Proxy proxy = connect(host, port, protocol);
        return getPublicIpAddress(proxy);
    }

    @Override
    protected void onPostExecute(String s) {
        if (proxyClientCallback != null){
            proxyClientCallback.onProxyConnected(s);
        }
    }

    public interface ProxyClientCallback{

        void onProxyConnected(String public_ip);

    }
}
