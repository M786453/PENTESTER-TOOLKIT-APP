package com.example.pentestertoolkit.SiteMapper;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.example.pentestertoolkit.R;

import org.w3c.dom.Text;

import java.util.ArrayList;
import java.util.List;

public class LinkClassifier {

    private TreeNode root;

    private LinearLayout linearLayoutSiteMap;

    public LinkClassifier(LinearLayout linearLayoutSiteMap){
        root = new TreeNode("/");
        this.linearLayoutSiteMap = linearLayoutSiteMap;
    }

    public void addLink(String link){

        String[] parts = link.split("/");

        TreeNode node = root;

        for(String part : parts){

            TreeNode child = node.getChild(part);

            if (child == null){
                child = new TreeNode(part);
                node.addChild(child);
            }

            node = child;


        }

    }

    public void printHierarchy(){

        printHierarchy(root, 0);

    }

    private void printHierarchy(TreeNode node, int depth){
        String emptyString = "";
        for (int i=0; i < depth; i++){
           emptyString += " ";
        }
        Log.i("HIERARCHY: ", emptyString + node.getValue());

        for(TreeNode child : node.getChildren()){
            printHierarchy(child, depth + 1);
        }

    }


    public void showSiteMap(){
        showSiteMap(root, 0, linearLayoutSiteMap);
    }

    private void showSiteMap(TreeNode node, int depth, LinearLayout parent_layout){

        try {

            LayoutInflater layoutInflater = (LayoutInflater) linearLayoutSiteMap.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);


            if (node.getChildren().size() == 0) {
                //Node is file
                LinearLayout file_view =(LinearLayout) layoutInflater.inflate(R.layout.file_layout_sitemap, null);

                TextView file_textview = file_view.findViewById(R.id.txtFileNameSiteMapper);
                if (depth!=0)
                file_view.setPadding(65, 0, 0, 0);

                file_textview.setText(node.getValue());

                parent_layout.addView(file_view);

            } else {
                //Node is folder

                LinearLayout folder_view = (LinearLayout) layoutInflater.inflate(R.layout.folder_layout_sitemap, null);

                TextView folder_textview = folder_view.findViewById(R.id.txtFolderNameSiteMapper);

                if (depth!=0) //for root node, do not set padding
                folder_view.setPadding(60, 0, 0, 0);

                LinearLayout linearLayout_children = folder_view.findViewById(R.id.linearLayoutHierarchySiteMapper);

                folder_view.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        if (linearLayout_children.getVisibility() == View.GONE)
                            linearLayout_children.setVisibility(View.VISIBLE);
                        else
                            linearLayout_children.setVisibility(View.GONE);
                    }
                });

                folder_textview.setText(node.getValue());

                parent_layout.addView(folder_view);

                for (TreeNode child : node.getChildren()) {
                    showSiteMap(child, depth + 1, linearLayout_children);
                }

            }

        }catch (Exception e){
            Log.i("LINK CLASSIFIER ERROR: ", e.getMessage());
        }

    }

    private class TreeNode{

        private String value;

        private List<TreeNode> children;

        public TreeNode(String value){
            this.value = value;
            children = new ArrayList<>();
        }

        public String getValue(){
            return value;
        }

        public List<TreeNode> getChildren(){
            return children;
        }

        public TreeNode getChild(String value){
            for(TreeNode child:children){
                if (child.getValue().equals(value))
                    return child;
            }
            return null;
        }

        public void addChild(TreeNode child){
            children.add(child);
        }


    }

}
