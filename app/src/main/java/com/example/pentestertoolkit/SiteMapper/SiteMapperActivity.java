package com.example.pentestertoolkit.SiteMapper;

import static com.example.pentestertoolkit.Global.HttpData.linkClassifier;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.R;

public class SiteMapperActivity extends AppCompatActivity implements AutomatedSiteMapGenerator.SiteMapCallback {

    private LinearLayout linearLayoutSiteMap, linearLayoutParentSiteMap;
    private boolean isImgSettingsAnimated;
    private ImageView imgSettings;
    private EditText edtSiteMapper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_site_mapper);

        getSupportActionBar().hide();

        isImgSettingsAnimated = false;


        //Initialize UI Components
        linearLayoutSiteMap = findViewById(R.id.linearLayoutSiteMap);
        imgSettings = findViewById(R.id.img_settings_site_mapper);
        edtSiteMapper = findViewById(R.id.edt_sitemapper);
        linearLayoutParentSiteMap = findViewById(R.id.linearLayoutParentSiteMapper);



        //Sitemap functionality
        imgSettings.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                String url = edtSiteMapper.getText().toString();

                if (url.isEmpty()){
                    Toast.makeText(SiteMapperActivity.this, "EMPTY INPUT", Toast.LENGTH_SHORT).show();
                    return;
                }

                if(!isImgSettingsAnimated) {
                    imgSettings.animate().setDuration(500).rotation(60f);
                    isImgSettingsAnimated = true;
                    showSettingsPopup();
                }
            }
        });



    }

    private void showSettingsPopup() {

        LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);

        View popupView = inflater.inflate(R.layout.site_mapper_popup, null);

        // UI Component

        Button btnDone = popupView.findViewById(R.id.btnSmDone);
        RadioGroup rg_spidering_mode = popupView.findViewById(R.id.rg_spidering_mode);


        // Create Popup Window
        int width = LinearLayout.LayoutParams.MATCH_PARENT;
        int height = LinearLayout.LayoutParams.MATCH_PARENT;
        final PopupWindow popupWindow = new PopupWindow(popupView, width, height, true);

        popupWindow.showAtLocation(linearLayoutParentSiteMap, Gravity.CENTER, 0,0);


        // Spidering Functionality
        btnDone.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                String url = edtSiteMapper.getText().toString();


                if(rg_spidering_mode.getCheckedRadioButtonId() == R.id.rb_ud_spidering){
                    // User-directed Spidering mode
                    Toast.makeText(SiteMapperActivity.this, "User Directed Spidering", Toast.LENGTH_SHORT).show();
                    Intent ud_intent = new Intent(SiteMapperActivity.this, SmBrowser.class);
                    ud_intent.putExtra("URL", url);
                    startActivity(ud_intent);

                }else if(rg_spidering_mode.getCheckedRadioButtonId() == R.id.rb_a_spidering){
                    // Automated Spidering mode
                    Toast.makeText(SiteMapperActivity.this, "Automated Spidering Started...", Toast.LENGTH_SHORT).show();
                    AutomatedSiteMapGenerator automatedSiteMapGenerator = new AutomatedSiteMapGenerator(SiteMapperActivity.this, url);
                    automatedSiteMapGenerator.execute();

                } else{
                    Toast.makeText(SiteMapperActivity.this, "No option selected.", Toast.LENGTH_SHORT).show();
                }

                popupWindow.dismiss();
            }
        });

        // Dismiss Popup window
        popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                imgSettings.animate().setDuration(500).rotation(-60f);
                isImgSettingsAnimated = false;
            }
        });


    }

    public void showSiteMap(){
        showSiteMap(linkClassifier.root, 0, linearLayoutSiteMap);
    }

    private void showSiteMap(LinkClassifier.LinkNode node, int depth, LinearLayout parent_layout){

        try {

            LayoutInflater layoutInflater = (LayoutInflater) linearLayoutSiteMap.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);


            if (node.getChildren().size() == 0) {
                //Node is file
                LinearLayout file_view =(LinearLayout) layoutInflater.inflate(R.layout.file_layout_sitemap, null);

                TextView file_textview = file_view.findViewById(R.id.txtFileNameSiteMapper);
                if (depth!=0)
                    file_view.setPadding(65, 0, 0, 0);

                file_textview.setText(node.getValue());

                parent_layout.addView(file_view);

            } else {
                //Node is folder

                LinearLayout folder_view = (LinearLayout) layoutInflater.inflate(R.layout.folder_layout_sitemap, null);

                TextView folder_textview = folder_view.findViewById(R.id.txtFolderNameSiteMapper);

                if (depth!=0) //for root node, do not set padding
                    folder_view.setPadding(60, 0, 0, 0);

                LinearLayout linearLayout_children = folder_view.findViewById(R.id.linearLayoutHierarchySiteMapper);

                folder_view.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        if (linearLayout_children.getVisibility() == View.GONE)
                            linearLayout_children.setVisibility(View.VISIBLE);
                        else
                            linearLayout_children.setVisibility(View.GONE);
                    }
                });

                folder_textview.setText(node.getValue());

                parent_layout.addView(folder_view);

                for (LinkClassifier.LinkNode child : node.getChildren()) {
                    showSiteMap(child, depth + 1, linearLayout_children);
                }

            }

        }catch (Exception e){
            Log.i("LINK CLASSIFIER ERROR: ", e.getMessage());
        }

    }


    @Override
    public void OnSiteMapGenerated() {
        linearLayoutSiteMap.removeAllViews();
        showSiteMap();
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (linearLayoutSiteMap != null) {
            linearLayoutSiteMap.removeAllViews();
            showSiteMap();
        }
    }
}