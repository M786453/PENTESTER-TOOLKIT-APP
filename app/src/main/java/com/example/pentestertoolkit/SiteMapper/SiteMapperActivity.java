package com.example.pentestertoolkit.SiteMapper;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RadioGroup;
import android.widget.Toast;

import com.example.pentestertoolkit.R;

public class SiteMapperActivity extends AppCompatActivity implements SiteMapGenerator.SiteMapCallback {

    private LinearLayout linearLayoutSiteMap, linearLayoutParentSiteMap;
    private boolean isImgSettingsAnimated;
    private ImageView imgSettings;
    private EditText edtSiteMapper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_site_mapper);

        getSupportActionBar().hide();

        isImgSettingsAnimated = false;

        //Initialize UI Components
        linearLayoutSiteMap = findViewById(R.id.linearLayoutSiteMap);
        imgSettings = findViewById(R.id.img_settings_site_mapper);
        edtSiteMapper = findViewById(R.id.edt_sitemapper);
        linearLayoutParentSiteMap = findViewById(R.id.linearLayoutParentSiteMapper);


        //Sitemap functionality

        imgSettings.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                String url = edtSiteMapper.getText().toString();

                if (url.isEmpty()){
                    Toast.makeText(SiteMapperActivity.this, "EMPTY INPUT", Toast.LENGTH_SHORT).show();
                    return;
                }

                if(!isImgSettingsAnimated) {
                    imgSettings.animate().setDuration(500).rotation(60f);
                    isImgSettingsAnimated = true;
                    showSettingsPopup();
                }
            }
        });



    }

    private void showSettingsPopup() {

        LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);

        View popupView = inflater.inflate(R.layout.site_mapper_popup, null);

        // UI Component

        Button btnDone = popupView.findViewById(R.id.btnSmDone);
        RadioGroup rg_spidering_mode = popupView.findViewById(R.id.rg_spidering_mode);


        // Create Popup Window
        int width = LinearLayout.LayoutParams.MATCH_PARENT;
        int height = LinearLayout.LayoutParams.WRAP_CONTENT;
        final PopupWindow popupWindow = new PopupWindow(popupView, width, height, true);

        popupWindow.showAtLocation(linearLayoutParentSiteMap, Gravity.CENTER, 0,0);


        // Spidering Functionality
        btnDone.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                String url = edtSiteMapper.getText().toString();


                if(rg_spidering_mode.getCheckedRadioButtonId() == R.id.rb_ud_spidering){
                    // User-directed Spidering mode
                    Toast.makeText(SiteMapperActivity.this, "User Directed Spidering", Toast.LENGTH_SHORT).show();
                    Intent ud_intent = new Intent(SiteMapperActivity.this, SmBrowser.class);
                    ud_intent.putExtra("URL", url);
                    startActivity(ud_intent);

                }else if(rg_spidering_mode.getCheckedRadioButtonId() == R.id.rb_a_spidering){
                    // Automated Spidering mode
//                    linearLayoutSiteMap.removeAllViews();
                    Toast.makeText(SiteMapperActivity.this, "Automated Spidering Started...", Toast.LENGTH_SHORT).show();
                    SiteMapGenerator siteMapGenerator = new SiteMapGenerator(SiteMapperActivity.this, linearLayoutSiteMap, url);
                    siteMapGenerator.execute();

                }

                popupWindow.dismiss();
            }
        });

        // Dismiss Popup window
        popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                imgSettings.animate().setDuration(500).rotation(-60f);
                isImgSettingsAnimated = false;
            }
        });


    }

    @Override
    public void OnSiteMapGenerated(LinkClassifier classifier) {
        classifier.showSiteMap();
    }
}