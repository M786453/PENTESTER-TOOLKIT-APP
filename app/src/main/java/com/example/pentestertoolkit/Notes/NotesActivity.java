package com.example.pentestertoolkit.Notes;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.webkit.WebResourceRequest;
import android.widget.EditText;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.HttpData;
import com.example.pentestertoolkit.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class NotesActivity extends AppCompatActivity {

    public static final int NEW_NOTE_ACTIVITY_REQUEST_CODE = 1;

    NotesViewModel notesViewModel;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_notes);

        getSupportActionBar().hide();

        //Notes Data holder
        List<Note> parent_notesList = new ArrayList<>();
        List<Note> filter_notesList = new ArrayList<>();

        // UI Components
        RecyclerView notesRecyclerView = findViewById(R.id.notesRecyclerView);
        FloatingActionButton fab_add_note = findViewById(R.id.fab_add_note);
        notesViewModel = new ViewModelProvider(this).get(NotesViewModel.class);
        EditText edtSearch = findViewById(R.id.edt_search_notes);

        //Set Adapter
        final NotesListAdapter adapter = new NotesListAdapter(new NotesListAdapter.NoteDiff());
        notesRecyclerView.setAdapter(adapter);
        notesRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        adapter.submitList(filter_notesList);

        notesViewModel.getNotes().observe(this, notes -> {
            //Updating parent notes list
            parent_notesList.clear();
            parent_notesList.addAll(notes);
            //Updating filter notes list
            filter_notesList.clear();
            filter_notesList.addAll(parent_notesList);
            adapter.notifyDataSetChanged();
        });


        fab_add_note.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                startActivityForResult(new Intent(NotesActivity.this, NewNoteActivity.class), NEW_NOTE_ACTIVITY_REQUEST_CODE);
            }
        });


        //Search functionality
        edtSearch.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                filter_notesList.clear();

                for (Note note: parent_notesList){
                    if (note.getNote().toLowerCase(Locale.ROOT).contains(charSequence.toString().toLowerCase(Locale.ROOT)))
                        filter_notesList.add(note);
                }

                //Update listview
                adapter.notifyDataSetChanged();
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });



    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == NEW_NOTE_ACTIVITY_REQUEST_CODE && resultCode == RESULT_OK){
            Note note = new Note(data.getStringExtra(NewNoteActivity.EXTRA_REPLY));
            notesViewModel.insert(note);
        }else{
            Toast.makeText(this, "Note not saved.", Toast.LENGTH_SHORT).show();
        }
    }
}