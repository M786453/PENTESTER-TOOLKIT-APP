package com.example.pentestertoolkit.Notes;

import android.content.Context;

import androidx.annotation.NonNull;
import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import androidx.sqlite.db.SupportSQLiteDatabase;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Database(entities = {Note.class}, version = 1, exportSchema = false)
public abstract class NotesRoomDatabase extends RoomDatabase {

    public abstract NotesDao notesdao();

    private static volatile NotesRoomDatabase INSTANCE;

    private static final int NUMBER_OF_THREADS = 4;

    static final ExecutorService databaseWriteExecutor = Executors.newFixedThreadPool(NUMBER_OF_THREADS);

    private static RoomDatabase.Callback roomDatabaseCallback = new RoomDatabase.Callback() {

        @Override
        public void onCreate(@NonNull SupportSQLiteDatabase db) {
            super.onCreate(db);

            // If you want to keep data through app restarts,
            // comment out the following block
            databaseWriteExecutor.execute(() -> {
                // Populate the database in the background.
                // If you want to start with more words, just add them.
                NotesDao dao = INSTANCE.notesdao();
                dao.deleteNotes();

                Note note = new Note("Hello");
                dao.insert(note);
                note = new Note("World");
                dao.insert(note);
            });
        }

    };


    static NotesRoomDatabase getDatabase(final Context context){

        if (INSTANCE == null){
            synchronized (NotesRoomDatabase.class){
                if (INSTANCE == null){
                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),
                            NotesRoomDatabase.class, "notes_database").addCallback(roomDatabaseCallback).build();
                }
            }
        }

        return INSTANCE;
    }



}
