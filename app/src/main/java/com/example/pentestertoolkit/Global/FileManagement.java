package com.example.pentestertoolkit.Global;

import static java.lang.System.out;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.util.Log;

import androidx.annotation.RequiresApi;
import androidx.core.app.ActivityCompat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;


public class FileManagement {

    public static int READ_REQ_CODE = 3000;
    public static int WRITE_REQ_CODE = 1000;

    public static boolean getWritePermission(Context context) {
        //Permission for Write External Storage
        if (Build.VERSION.SDK_INT >= 23) {
            if (context.checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
                Log.v("PERMISSION", "Permission is granted!");
            } else {
                Log.v("Permission", "Permission is revoked!");
                ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, WRITE_REQ_CODE);
                return false;
            }

        } else {

            Log.v("Tag", "Permission is granted!");

        }

        return true;

    }


    public static boolean getReadPermission(Context context){

    // Permission for Read External Storage
        if (Build.VERSION.SDK_INT >= 23){

        if (context.checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE)== PackageManager.PERMISSION_GRANTED){


            Log.v("PERMISSION","Permission is granted!");


        }else {

            Log.v("Permission","Permission is revoked!");
            ActivityCompat.requestPermissions((Activity) context,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},READ_REQ_CODE);
            return false;
        }
    }else {

        Log.v("Tag","Permission is granted!");




    }

        return true;
    }

    public static String readFile(Context context, Uri fileUri){

        String fileData = "";
        try {
            InputStream in = context.getContentResolver().openInputStream(fileUri);
            try {

                // Transfer bytes from in to out
                byte[] buf = new byte[in.available()];

                in.read(buf);

                fileData = new String(buf);
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                in.close();
            }

        }catch (Exception e){
            e.printStackTrace();
        }

        return fileData;


    }


    @RequiresApi(api = Build.VERSION_CODES.O)
    public static boolean saveFile(String data, String toolDirectoryPath){

        try{

            if (data.isEmpty())
                return false;

            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss");

            LocalDateTime current_time = LocalDateTime.now();

            createAppDirectory();

            createDirectory(toolDirectoryPath);

            String outDst = toolDirectoryPath + "/" + dtf.format(current_time) + ".txt";

            byte[] data_bytes = data.getBytes();

            OutputStream out = new FileOutputStream(outDst);

            try{
                out.write(data_bytes, 0 , data_bytes.length);

            }catch (Exception e){
                Log.e("FileSaveError", e.getMessage());
                return false;
            }finally {
                out.close();
            }

        }catch (Exception e){
            Log.e("FileSaveError", e.getMessage());
            return false;
        }

        return true;

    }


    public static void createAppDirectory(){

        String app_directory_path = Environment.getExternalStorageDirectory() + "/PENTESTER TOOLKIT";

        File app_directory = new File(app_directory_path);

        if (!app_directory.exists())
            app_directory.mkdir();

    }


    public static void createDirectory(String directoryPath){

        File directory = new File(directoryPath);

        if(!directory.exists())
            directory.mkdir();

    }





}
