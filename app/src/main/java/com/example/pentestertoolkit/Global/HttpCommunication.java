package com.example.pentestertoolkit.Global;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Handler;
import android.util.Log;

import com.example.pentestertoolkit.Intruder.AttackTransactionsData;
import com.example.pentestertoolkit.Privacy.ProxySection.ProxyClient;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class HttpCommunication{
    
    private String request;
    
    private String response;

    private HttpCommunicationCallback hcCallback;
    
    public HttpCommunication(String request, HttpCommunicationCallback hcCallback){
        
        this.request = request;
        
        this.response = "";

        this.hcCallback = hcCallback;

        
    }


    public void sendRequest(){

        new Thread(new Runnable() {
            @Override
            public void run() {

                try{

                    // Creating request
                    URL url = new URL(getRequestUrl(request));

                    Log.i("HC_REQUEST", request);

                    HttpURLConnection httpUrlConnection;

                    //Check if proxy is connected, then use proxy
                    if (ProxyClient.isConnected && ProxyClient.proxy != null){
                        httpUrlConnection = (HttpURLConnection) url.openConnection(ProxyClient.proxy);
                    }else{
                        //otherwise, not use proxy
                        httpUrlConnection = (HttpURLConnection) url.openConnection();
                    }



                    // Set request method
                    httpUrlConnection.setRequestMethod(request.split(" ")[0]);

                    //Set headers to request
                    String[] requestLines = request.split("\n");

                    for(String header : requestLines) {
                        if (header.split(" ")[0].contains(":")) {
                            String header_name = header.split(" ")[0];
                            header_name = header_name.substring(0, header_name.length()-1);
                            String header_value  = header.split(" ")[1];

                            //Setting header to request
                            httpUrlConnection.setRequestProperty(header_name, header_value);
                        }
                    }

                    //Send Request
                    httpUrlConnection.connect();


                    //Receive Response
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpUrlConnection.getInputStream()));
                    String line;
                    while ((line = bufferedReader.readLine()) != null)
                        response += line + "\n";



                    bufferedReader.close();
                    httpUrlConnection.disconnect();

                    Log.i("HC_RESPONSE", response);

                }catch (Exception e){
                    e.printStackTrace();
                    response = "Error";

                }

                if (response != null && !response.isEmpty()){
                    hcCallback.onResponseReceived(response);
                }

            }
        }).start();

    }

    public static String getRequestUrl(String request){

        try{

            String url = request.split(" ")[1];

            // If url string do not contain protocol
            if (!url.contains("://")){

                String host = "";

                if (request.contains("Host:")){

                    host = request.split("\n")[1].split(": ")[1];

                }
                Log.i("HC_HOST", host + " - ");
                url = "https://" + host + url;

            }

            return url;

        }catch (Exception e){
            Log.i("HC_ERROR", e.getMessage());

            return "";
        }




    }

    public interface HttpCommunicationCallback{

        void onResponseReceived(String mResponse);

    }
}
