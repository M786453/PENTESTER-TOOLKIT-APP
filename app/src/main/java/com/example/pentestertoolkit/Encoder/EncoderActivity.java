package com.example.pentestertoolkit.Encoder;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;


import com.example.pentestertoolkit.Global.CopyText;
import com.example.pentestertoolkit.Global.MySpinner;
import com.example.pentestertoolkit.Global.FileManagement;
import com.example.pentestertoolkit.R;

public class EncoderActivity extends AppCompatActivity {

    private ImageView imgSettings, imgCopyOutput, imgSaveOutput, imgChooseFile;
    private boolean isImgSettingsAnimated;
    private LinearLayout linearLayoutParent;
    private EditText edtInputString;
    private TextView txtOutput;
    private int PICKFILE_REQUEST_CODE = 1212;
    private String TOOL_DIRECTORY_PATH;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_encoder);

        getSupportActionBar().hide();

        TOOL_DIRECTORY_PATH = Environment.getExternalStorageDirectory() + "/PENTESTER TOOLKIT/Encoder";

        // Initialize UI components

        isImgSettingsAnimated = false;

        imgSettings = findViewById(R.id.img_settings_encoder);

        linearLayoutParent = findViewById(R.id.linearLayoutParentEncoder);

        edtInputString = findViewById(R.id.edt_encoder);

        txtOutput = findViewById(R.id.txtEncoderOutput);

        imgCopyOutput = findViewById(R.id.imgEncoderTextCopy);

        imgSaveOutput = findViewById(R.id.imgEncoderFileSave);

        imgChooseFile = findViewById(R.id.imgChooseFileEncoder);

        // Settings Functionality

        imgSettings.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if(edtInputString.getText().toString().isEmpty()){
                    Toast.makeText(EncoderActivity.this, "EMPTY INPUT", Toast.LENGTH_SHORT).show();
                    return;
                }

                if(!isImgSettingsAnimated) {
                    imgSettings.animate().setDuration(500).rotation(60f);
                    isImgSettingsAnimated = true;
                    showSettingsPopup();
                }
            }
        });

        // Copy Output Functionality

        imgCopyOutput.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                CopyText.copy(EncoderActivity.this, txtOutput.getText() + "");
                Toast.makeText(EncoderActivity.this, "Copied!", Toast.LENGTH_SHORT).show();
            }
        });

        // Save output to a file functionality

        imgSaveOutput.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void onClick(View view) {

                if(FileManagement.getWritePermission(EncoderActivity.this))
                    if(FileManagement.saveFile(txtOutput.getText().toString(), TOOL_DIRECTORY_PATH))
                        Toast.makeText(EncoderActivity.this, "File Saved!", Toast.LENGTH_SHORT).show();
                    else
                        Toast.makeText(EncoderActivity.this, "File not saved.", Toast.LENGTH_SHORT).show();
            }
        });

        // Choose File Functionality

        imgChooseFile.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if(FileManagement.getReadPermission(EncoderActivity.this))
                chooseFile();

            }
        });




    }

    public void showSettingsPopup(){

        LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);

        View popupView = inflater.inflate(R.layout.encoder_settings_popup, null);

        // UI Components of Popup view

        android.widget.Spinner encoder_spinner = popupView.findViewById(R.id.encoder_spinner);

        Button btn_encode = popupView.findViewById(R.id.btnEncode);

        Button btn_decode = popupView.findViewById(R.id.btnDecode);

        // Encoder Spinner Configurations

        String[] encoding_schemes_array = {"Base64", "HTML", "URL", "HEX"};
        MySpinner encodingSpinner = new MySpinner(EncoderActivity.this, encoder_spinner, encoding_schemes_array );

        encodingSpinner.configureSpinner();

        // Create Popup Window
        int width = LinearLayout.LayoutParams.MATCH_PARENT;
        int height = LinearLayout.LayoutParams.MATCH_PARENT;
        final PopupWindow popupWindow = new PopupWindow(popupView, width, height, true);

        popupWindow.showAtLocation(linearLayoutParent, Gravity.CENTER, 0,0);


        // Encode Functionality

        btn_encode.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void onClick(View view) {
                String encodedString = EncoderDecoder.encode(edtInputString.getText() + "",encodingSpinner.getSelectedScheme());
                txtOutput.setText(encodedString);
                popupWindow.dismiss();
            }
        });

        // Decode Functionality

        btn_decode.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void onClick(View view) {
                String decodedString = EncoderDecoder.decode(edtInputString.getText() + "",encodingSpinner.getSelectedScheme());
                txtOutput.setText(decodedString);
                popupWindow.dismiss();
            }
        });

        // Popup Dismiss Listener

        popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                imgSettings.animate().setDuration(500).rotation(-60f);
                isImgSettingsAnimated = false;
            }
        });

    }

    public void chooseFile(){

        Intent chooseFile = new Intent(Intent.ACTION_GET_CONTENT);

        chooseFile.setType("text/plain");

        chooseFile = Intent.createChooser(chooseFile, "Choose a file");

        startActivityForResult(chooseFile, PICKFILE_REQUEST_CODE);

    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == PICKFILE_REQUEST_CODE && resultCode == RESULT_OK) {
            Uri fileUri = data.getData();

            String fileData = FileManagement.readFile(this, fileUri);

            edtInputString.setText(fileData);

            Log.i("FileData",  fileData + "-");

        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if (requestCode == FileManagement.READ_REQ_CODE && grantResults.length > 0)
            chooseFile();
        else if (requestCode == FileManagement.WRITE_REQ_CODE && grantResults.length >0)
            Toast.makeText(this, "Save the file", Toast.LENGTH_SHORT).show();

    }
}