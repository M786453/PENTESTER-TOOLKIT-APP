package com.example.pentestertoolkit.Encoder;

import android.os.Build;
import android.widget.Toast;

import androidx.annotation.RequiresApi;

import org.apache.commons.text.StringEscapeUtils;

import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.Base64;

public class EncoderDecoder {

 @RequiresApi(api = Build.VERSION_CODES.O)
 public static String encode(String inputString, String encoding_scheme){

     String encodedString = "";

     try {
         switch (encoding_scheme) {
             case "Base64":
                 encodedString = Base64.getEncoder().encodeToString(inputString.getBytes());
                 break;
             case "HTML":
                 encodedString = StringEscapeUtils.escapeHtml4(inputString);
                 break;
             case "URL":
                 encodedString = URLEncoder.encode(inputString,"UTF-8");
                 break;

         }

     }catch (Exception e){
         encodedString = e.getLocalizedMessage();
     }

     return encodedString;
 }

 @RequiresApi(api = Build.VERSION_CODES.O)
 public static String decode(String inputString, String decoding_scheme){

     String decodedString = "";

     try {
         switch (decoding_scheme) {
             case "Base64":
                 byte[] decodedStringBytes = Base64.getDecoder().decode(inputString);
                 decodedString = new String(decodedStringBytes);
                 break;
             case "HTML":
                 decodedString = StringEscapeUtils.unescapeHtml4(inputString);
                 break;
             case "URL":
                 decodedString = URLDecoder.decode(inputString, "UTF-8");
                 break;
         }

     }catch (Exception e){
         decodedString = e.getLocalizedMessage();
     }

     return decodedString;
 }

}
