package com.example.pentestertoolkit.Intruder;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.FileManagement;
import com.example.pentestertoolkit.Global.HttpCommunication;
import com.example.pentestertoolkit.Global.MySpinner;
import com.example.pentestertoolkit.HttpMonitor.HttpMonitorActivity;
import com.example.pentestertoolkit.R;

import java.util.ArrayList;
import java.util.HashMap;

public class ConfigureIntrusionActivity extends AppCompatActivity {

    private RadioGroup rg_chs_pyld_option;
    private EditText edtPayload;
    private TextView txtChoosePayloadFile;
    private String payload_str = "";
    private int prev_sel_pyld_pos = 0;
    private HashMap<Integer, String[]> payload_hm;
    public static ArrayList<String[]> payload_sets_list;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_configure_intrusion);

        //hide action bar
        getSupportActionBar().hide();

        //UI Components
        Spinner pyld_pos_spinner = findViewById(R.id.pyld_pos_spinner);
        TextView txtTitle = findViewById(R.id.txtTitleIntConfig);
        Button btnIntrude = findViewById(R.id.btnIntrude);
        txtChoosePayloadFile = findViewById(R.id.txtChoosePayloadFile);
        rg_chs_pyld_option = findViewById(R.id.rg_choose_payload_option);
        edtPayload = findViewById(R.id.edtPayload);

        //Get Data from intent
        String request = getIntent().getStringExtra("REQUEST");
        String attackType = getIntent().getStringExtra("ATTACK_TYPE");
        int no_payload_positions = getIntent().getIntExtra("PYLD_POS", 0);

        // setting up Hashmap for payloads set
        initializePayloadHm(no_payload_positions);

        //Spinner Configurations
        String[] payload_positions = generatePyldPos(no_payload_positions);
        MySpinner spinner = new MySpinner(ConfigureIntrusionActivity.this, pyld_pos_spinner, payload_positions);
        spinner.configureSpinner();

        pyld_pos_spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {


                // If previous selected payload position of spinner is not zero, it means user has selected
                // the payload position for the second time and now the previous payload position is a valid
                // value
                if (prev_sel_pyld_pos != 0){
                    String[] payload_set = getPayloads();
                    if (payload_set.length == 0){
                        Toast.makeText(ConfigureIntrusionActivity.this, "EMPTY PAYLOAD SET", Toast.LENGTH_SHORT).show();
                    }else{
                        payload_hm.put(prev_sel_pyld_pos, getPayloads());
                    }

                }


                // Show payloads data with respect to payload position (if exists)
                String[] l_pyld_set = payload_hm.get(i);

                if (l_pyld_set != null && l_pyld_set.length != 0){

                    String combined_payload = "";
                    for (String pyld: l_pyld_set){
                        combined_payload += pyld + "\n";
                    }

                    edtPayload.setText(combined_payload);
                }else{
                    resetViewsAfterPayloadSetted();
                }

                prev_sel_pyld_pos = i;
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        //Control visibility of titles on basis of attack type
        if (attackType.equals("Sniper")){
            txtTitle.setText(getString(R.string.sniper_attack));
            pyld_pos_spinner.setVisibility(View.GONE);
        }else if (attackType.equals("Pitch Fork")){
            txtTitle.setText(getString(R.string.pitch_fork_attack));
        }else if (attackType.equals("Cluster Bomb")){
            txtTitle.setText(getString(R.string.cluster_bomb_attack));
        }


        // Proceed Attack
        btnIntrude.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                String[] payloads = getPayloads();

                Log.i("PAYLOADS POS: ", no_payload_positions + "");

                if (payloads.length == 0){
                    Toast.makeText(ConfigureIntrusionActivity.this, "No payloads provided", Toast.LENGTH_SHORT).show();
                    return;
                }


                if (!spinner.getSelectedScheme().equals("SELECT PAYLOAD POSITION")) {
                    // Add the payload relative to last selected payload position
                    payload_hm.put(Integer.parseInt(spinner.getSelectedScheme()), getPayloads());
                    resetViewsAfterPayloadSetted();
                }

                // Generate payload sets list
                payload_sets_list = generatePayloadSetList(no_payload_positions);


                // If no. of payloads setted is not equal to payload positions then do not proceed
                if (payload_sets_list.size() != no_payload_positions){
                        Toast.makeText(ConfigureIntrusionActivity.this, "Payloads are not set for one or more payload positions.", Toast.LENGTH_SHORT).show();
                        return;

                }



                // Transition to HttpMonitoryActivity
                Intent intent = new Intent(ConfigureIntrusionActivity.this, HttpMonitorActivity.class);
                intent.putExtra("ATTACK", attackType);
                //If attack type is Sniper then put payloads array intent
                if (attackType.equals("Sniper")){
                    intent.putExtra("PAYLOADS", payloads);
                }
                intent.putExtra("REQUEST", request);
                startActivity(intent);

            }
        });


        // Choose Payload File
        txtChoosePayloadFile.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                openFilePicker();
            }
        });

    }

    private String[] getPayloads(){
        if (rg_chs_pyld_option.getCheckedRadioButtonId() == R.id.rb_file_payload){

            if (payload_str.isEmpty())
                return new String[]{};

            return payload_str.split("\n");
        }else if(rg_chs_pyld_option.getCheckedRadioButtonId() == R.id.rb_input_payload){

            payload_str = edtPayload.getText().toString();

            if (payload_str.isEmpty())
                return new String[]{};

            return payload_str.split("\n");

        }else{
            Toast.makeText(this, "Please Select Payload Option", Toast.LENGTH_SHORT).show();
            return new String[]{};
        }
    }

    private ArrayList<String[]> generatePayloadSetList(int payload_positions){

        ArrayList<String[]> payloadSetList = new ArrayList<>();

        for(int i=1;i<payload_positions+1;i++){

            String[] payloadSet = payload_hm.get(i);
            if (payloadSet != null && payloadSet.length != 0){
                payloadSetList.add(payloadSet);
            }

        }

        return payloadSetList;
    }

    private String[] generatePyldPos(int no_of_pyld_pos){

        no_of_pyld_pos++; // increase size by 1 because of placeholder

        String[] payload_positions = new String[no_of_pyld_pos];

        payload_positions[0] = "SELECT PAYLOAD POSITION"; // Placeholder

        for(int i=1;i<no_of_pyld_pos; i++){
            payload_positions[i] = i + "";
            Log.i("PAYLOAD_POS", i + "");
        }



        return payload_positions;
    }


    public void openFilePicker() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("text/plain");
        startActivityForResult(intent, FileManagement.FILE_PICKER_REQUEST_CODE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == FileManagement.FILE_PICKER_REQUEST_CODE && resultCode == RESULT_OK && data != null) {
            Uri selectedFileUri = data.getData();
            txtChoosePayloadFile.setText(selectedFileUri.getPath());
            payload_str = FileManagement.readFile(ConfigureIntrusionActivity.this, selectedFileUri);
        }
    }

    private void initializePayloadHm(int payload_positions){
        payload_hm = new HashMap<>();

        for(int i=1; i<payload_positions+1; i++){
            payload_hm.put(i, new String[]{});
        }

    }


    private void resetViewsAfterPayloadSetted(){
        //reset both file choose textview and edittext
        edtPayload.setText("");
        txtChoosePayloadFile.setText(getString(R.string.choose_payload));
    }
}