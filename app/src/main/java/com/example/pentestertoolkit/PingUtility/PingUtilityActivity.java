package com.example.pentestertoolkit.PingUtility;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.example.pentestertoolkit.Global.CopyText;
import com.example.pentestertoolkit.Global.FileManagement;
import com.example.pentestertoolkit.Global.MySpinner;
import com.example.pentestertoolkit.Hasher.HasherActivity;
import com.example.pentestertoolkit.R;

public class PingUtilityActivity extends AppCompatActivity {


    private LinearLayout linearLayoutParentPingUtility;
    private TextView txtPingOutput;
    private ImageView imgSettingsPingUtility;
    private ProgressDialog progressDialog;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_ping_utility);

        getSupportActionBar().hide();

        String TOOL_DIRECTORY_PATH = Environment.getExternalStorageDirectory() + "/PENTESTER TOOLKIT/PingUtility";


        // Initialize UI components
        EditText edtPingUtility = findViewById(R.id.edt_ping_utility);
        imgSettingsPingUtility = findViewById(R.id.img_settings_ping_utility);
        ImageView imgPingFileSave = findViewById(R.id.imgPingFileSave);
        ImageView imgPingTextCopy = findViewById(R.id.imgPingTextCopy);
        txtPingOutput = findViewById(R.id.txtPingOutput);
        linearLayoutParentPingUtility = findViewById(R.id.linearLayoutPingUtility);
        progressDialog = new ProgressDialog(PingUtilityActivity.this);




        // Ping Functionality
        imgSettingsPingUtility.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String ip_address = edtPingUtility.getText().toString();

                if (ip_address.isEmpty()){
                    Toast.makeText(PingUtilityActivity.this, "EMPTY HOST ADDRESS", Toast.LENGTH_SHORT).show();
                    return;
                }

                showSettingsPopup(ip_address);




            }
        });


        // Copy ping output
        imgPingTextCopy.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                CopyText.copy(PingUtilityActivity.this, txtPingOutput.getText() + "");
                Toast.makeText(PingUtilityActivity.this, "Copied!", Toast.LENGTH_SHORT).show();
            }
        });


        // Save ping output to a file functionality
        imgPingFileSave.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void onClick(View view) {

                if(FileManagement.getWritePermission(PingUtilityActivity.this))
                    if(FileManagement.saveFile(txtPingOutput.getText().toString(), TOOL_DIRECTORY_PATH))
                        Toast.makeText(PingUtilityActivity.this, "File Saved!", Toast.LENGTH_SHORT).show();
                    else
                        Toast.makeText(PingUtilityActivity.this, "File not saved.", Toast.LENGTH_SHORT).show();
            }
        });

    }

    private void showSettingsPopup(String ip_address) {

        LayoutInflater layoutInflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);

        View popupView = layoutInflater.inflate(R.layout.ping_utility_settings, null);

        //UI Components
        Spinner ping_frequency_spinner = popupView.findViewById(R.id.ping_frequency_spinner);
        Button btn_ping = popupView.findViewById(R.id.btnPing);

        // Spinner Configuration

        String[] frequency_array = {"1","2","3","4","5","6","7","8","9"};

        MySpinner spinner = new MySpinner(PingUtilityActivity.this, ping_frequency_spinner, frequency_array);

        spinner.configureSpinner();

        // Create Popup Window
        int width = LinearLayout.LayoutParams.MATCH_PARENT;
        int height = LinearLayout.LayoutParams.MATCH_PARENT;
        final PopupWindow popupWindow = new PopupWindow(popupView, width, height, true);

        popupWindow.showAtLocation(linearLayoutParentPingUtility, Gravity.CENTER, 0,0);


        //Ping Functionality
        btn_ping.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //Clear Output
                txtPingOutput.setText("");

                int frequency = Integer.parseInt(spinner.getSelectedScheme());
                progressDialog.setMessage("Pinging " + ip_address);

                // This will run in background
                new Thread(new Runnable() {
                    @Override
                    public void run() {

                        String pingOutput = PingClass.ping(ip_address, frequency);

                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                txtPingOutput.setText(pingOutput);
                                progressDialog.dismiss();
                            }
                        });
                    }
                }).start();


                popupWindow.dismiss();
                progressDialog.show();


            }
        });




    }
}